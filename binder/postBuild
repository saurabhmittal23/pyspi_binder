#!/bin/bash

# Log file for debugging
LOGFILE="/home/jovyan/postbuild.log"

# Function to log messages
log_message() {
    echo "$(date): $1" >> $LOGFILE
}

log_message "Starting postBuild script"

set -e

# Check if the environment exists, if not create it
if ! conda env list | grep -q pyspi-env; then
    log_message "pyspi-env not found, creating it"
    conda env create -f environment.yml
else
    log_message "pyspi-env found, updating it"
    conda env update -f environment.yml
fi

# Activate the environment
source activate pyspi-env || source /srv/conda/etc/profile.d/conda.sh && conda activate pyspi-env

echo "Current Python version:"
python --version

if [[ $(python --version 2>&1) != *"3.8"* ]]; then
    log_message "Python 3.8 not found, attempting to install..."
    conda install -y python=3.8.1
fi

echo "Python version after potential install:"
python --version

# Install rsync from source
log_message "Installing rsync from source"
wget https://download.samba.org/pub/rsync/src/rsync-3.2.7.tar.gz
tar xzf rsync-3.2.7.tar.gz
cd rsync-3.2.7
./configure --prefix=$HOME/rsync --disable-xxhash --disable-lz4
make
make install
cd ..
rm -rf rsync-3.2.7 rsync-3.2.7.tar.gz

# Add rsync to PATH
echo 'export PATH=$HOME/rsync/bin:$PATH' >> $HOME/.bashrc
echo 'export PATH=$HOME/rsync/bin:$PATH' >> $HOME/.profile
export PATH=$HOME/rsync/bin:$PATH

# Verify rsync installation
log_message "Verifying rsync installation"
if which rsync; then
    log_message "rsync found in PATH"
    rsync --version >> $LOGFILE
else
    log_message "rsync not found in PATH"
    log_message "Current PATH: $PATH"
fi

# Install the package in editable mode
log_message "Installing package in editable mode"
pip install -e .

# Download the data
log_message "Downloading data"
wget http://agsiegert.astro.uni-wuerzburg.de/data.zip
if [ $? -ne 0 ]; then
    log_message "Failed to download data"
    exit 1
fi

# Unzip the data
log_message "Unzipping data"
unzip data.zip
if [ $? -ne 0 ]; then
    log_message "Failed to unzip data"
    exit 1
fi

# Remove the zip file to save space
log_message "Removing zip file"
rm data.zip

# Create directories and move data
log_message "Creating directories and moving data"
mkdir -p pyspi_datafolder
mv data/pointing_data/ pyspi_datafolder/
mv data pyspi_internal

# Set environment variables in multiple locations for redundancy
log_message "Setting environment variables"

# 1. In .bashrc
echo "export PYSPI=/home/jovyan/pyspi_datafolder" >> ~/.bashrc
echo "export PYSPI_PACKAGE_DATA=/home/jovyan/pyspi_internal" >> ~/.bashrc

# 2. In .profile (for login shells)
echo "export PYSPI=/home/jovyan/pyspi_datafolder" >> ~/.profile
echo "export PYSPI_PACKAGE_DATA=/home/jovyan/pyspi_internal" >> ~/.profile

# 3. In a custom script that can be sourced
echo "export PYSPI=/home/jovyan/pyspi_datafolder" > /home/jovyan/pyspi_env.sh
echo "export PYSPI_PACKAGE_DATA=/home/jovyan/pyspi_internal" >> /home/jovyan/pyspi_env.sh

# 4. Set for the current session (might help with immediate use)
export PYSPI=/home/jovyan/pyspi_datafolder
export PYSPI_PACKAGE_DATA=/home/jovyan/pyspi_internal

# Create .jupyter directory if it doesn't exist
log_message "Creating .jupyter directory if it doesn't exist"
mkdir -p /home/jovyan/.jupyter

# Create a jupyter_config.py file
log_message "Creating jupyter_config.py"
cat << EOF > /home/jovyan/.jupyter/jupyter_config.py
import os
os.environ['PYSPI'] = '/home/jovyan/pyspi_datafolder'
os.environ['PYSPI_PACKAGE_DATA'] = '/home/jovyan/pyspi_internal'
EOF

# Create a start script
log_message "Creating start script"
cat << EOF > /home/jovyan/start
#!/bin/bash
export PYSPI=/home/jovyan/pyspi_datafolder
export PYSPI_PACKAGE_DATA=/home/jovyan/pyspi_internal
exec "\$@"
EOF
chmod +x /home/jovyan/start

# Verify the environment setup
log_message "Verifying environment setup"
echo "PYSPI is set to: $PYSPI" >> $LOGFILE
echo "PYSPI_PACKAGE_DATA is set to: $PYSPI_PACKAGE_DATA" >> $LOGFILE
echo "Contents of pyspi_datafolder:" >> $LOGFILE
ls -R /home/jovyan/pyspi_datafolder >> $LOGFILE
echo "Contents of pyspi_internal:" >> $LOGFILE
ls -R /home/jovyan/pyspi_internal >> $LOGFILE

log_message "postBuild script completed"

# Final message
echo "postBuild script completed. Check $LOGFILE for details."

